타워 디펜스 AI 밸런싱 프로토타입 - 게임 기획 및 코드 구조 계획서
- 문서 버전: 1.0
- 작성일: 2025년 7월 11일
- 본 문서는 AI를 통한 자동 밸런싱 시스템 구축을 목표로 하는 타워 디펜스 프로토타입의 핵심 기획과 기술적 구조를 정의합니다.

---

### 1. 프로젝트 개요

- **프로젝트 명**: Project TD-AI
- **플랫폼**: 모바일 (Android/iOS)
- **개발 엔진**: Unity
- **핵심 컨셉**: '전략적 선택과 성장'의 핵심 재미 요소에 집중하고, AI가 밸런싱을 학습할 수 있는 최소 기능의 테스트베드(Testbed)를 구축한다.

---

### 2. 핵심 게임플레이

#### 2.1. 게임 목표
- **승리 조건**: 정해진 모든 적 웨이브(Wave)를 성공적으로 방어.
- **패배 조건**: 적 유닛이 방어선을 뚫고 기지에 도달하여 기지 체력이 0이 됨.

#### 2.2. 핵심 루프 (Core Loop)
1.  **방어**: 웨이브마다 몰려오는 적을 타워로 처치한다.
2.  **자원 획득**: 적을 처치하여 자원을 얻는다.
3.  **성장 및 강화**: 획득한 자원으로 새로운 타워를 건설하거나 기존 타워를 업그레이드하여 다음 웨이브를 준비한다.

#### 2.3. 맵 디자인
- **화면 구성**: 1 Scene = 1 Screen. 모든 전략적 상황이 한 화면에 표시되어 즉각적인 판단과 조작이 가능하도록 한다. 스크롤은 없다.

---

### 3. 게임 시스템 명세

#### 3.1. 적 (Enemy) 유닛 시스템
- **공통 로직**: 정해진 경로(Path)를 따라 이동하며, 사망 시 자원을 제공한다.
- **종류 (최소 2종):**
    1.  **빠른 적 (Runner)**: 이동 속도가 빠르지만 체력이 낮다. 초반 방어선을 시험하는 역할.
    2.  **튼튼한 적 (Tanker)**: 이동 속도가 느리지만 체력이 높다. 강력한 화력을 요구하는 역할.

#### 3.2. 타워 (Tower) 유닛 시스템
- **공통 로직**: 자신의 사정거리(Range) 내의 적을 자동으로 탐지하고 공격한다.
- **종류 (최소 2종):**
    1.  **속사포형 타워 (Machine Gun)**: 공격 속도가 빠르지만 공격력이 낮아 '빠른 적'에게 효과적이다.
    2.  **강력한 한방형 타워 (Cannon)**: 공격 속도가 느리지만 공격력이 높아 '튼튼한 적'에게 효과적이다.

#### 3.3. 업그레이드 시스템
- **구조**: 1~2단계의 단순한 업그레이드 기능을 제공한다.
- **목적**: 플레이어에게 '신규 건설 vs 기존 업그레이드'라는 전략적 선택지를 제공한다.

#### 3.4. 자원 및 웨이브 시스템
- **자원**: 적 사망 시 획득하는 것을 기본으로 한다.
- **웨이브**: 정해진 적 조합과 수량으로 구성된 웨이브가 순차적으로 등장하며, 웨이브 사이에 짧은 준비 시간을 제공한다.

---

### 4. AI 밸런싱 연동 계획

### 5. 코드 구조 계획

#### 5.1. 아키텍처 목표
- **데이터와 로직의 분리**: `ScriptableObject`를 활용하여 게임 밸런스 데이터를 코드와 분리, AI가 쉽게 접근하고 수정할 수 있도록 한다.
- **기능별 모듈화**: 각 시스템(UI, 타워, 적)을 독립적으로 관리하여 유지보수성과 확장성을 높인다.

#### 5.2. Scripts 폴더 구조

📁 Scripts
 ┣ 📁 Core
 ┃  ┣ 📜 GameManager.cs
 ┃  ┣ 📜 WaveSpawner.cs
 ┃  ┗ 📜 BuildManager.cs
 ┣ 📁 Data
 ┃  ┣ 📜 TowerData.cs
 ┃  ┣ 📜 EnemyData.cs
 ┃  ┗ 📜 WaveData.cs
 ┣ 📁 Towers
 ┃  ┣ 📜 Tower.cs
 ┃  ┗ 📜 Projectile.cs
 ┣ 📁 Enemies
 ┃  ┣ 📜 Enemy.cs
 ┃  ┗ 📜 EnemyMovement.cs
 ┗ 📁 UI
    ┣ 📜 UIManager.cs
    ┗ 📜 TowerSelectUI.cs


#### 5.3. 핵심 클래스 역할
- **GameManager**: 게임 상태(승리/패배), 자원, 생명력 등 중앙 상태 관리.
- **BuildManager**: 타워 건설, 업그레이드, 판매 로직 담당.
- **WaveSpawner**: `WaveData`를 기반으로 적 웨이브 생성 담당.
- **TowerData / EnemyData**: 유닛의 모든 능력치를 담는 데이터 컨테이너.
- **Tower / Enemy**: 각 유닛의 현장(Scene)에서의 행동 로직(공격, 이동 등)을 담당.